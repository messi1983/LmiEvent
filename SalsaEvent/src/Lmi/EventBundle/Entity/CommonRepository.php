<?php

namespace Lmi\EventBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * CommonRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below
 */
abstract class CommonRepository extends EntityRepository
{	
	/**
	 * Get all unpublished entities
	 * (non-PHPdoc)
	 */
	public function getUnpublishedEntities($nombreParPage, $page)
	{
		return $this->getEntities($nombreParPage, $page, false);
	}
	
	/**
	 * Get all published entities
	 * (non-PHPdoc)
	 */
    public function getPublishedEntities($nombreParPage, $page)
    {
		return $this->getEntities($nombreParPage, $page, true);
    }
    
    /**
     * Get published or unpublished entities
     * (non-PHPdoc)
     */
    public function getEntities($nombreParPage, $page, $published)
    {
    	// get all published entities
    	$query = $this->createQuery($published);
    
    	return $this->getPaginator($nombreParPage, $page, $query);
    }
    
    /**
     * Get a paginator for a result set.
     * @param unknown $nombreParPage
     * @param unknown $page
     * @param unknown $query
     */
    protected function getPaginator($nombreParPage, $page, $query)
    {
    	// On d�finit l'article � partir duquel commencer la liste
    	$query->setFirstResult(($page-1) * $nombreParPage)
    	// Ainsi que le nombre d'articles � afficher
    	->setMaxResults($nombreParPage);
    
    	// Enfin, on retourne l'objet Paginator correspondant � la requ�te construite
    	// (n'oubliez pas le use correspondant en d�but de fichier)
    	return new Paginator($query);
    }
	
}
